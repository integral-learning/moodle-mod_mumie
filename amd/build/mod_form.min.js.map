{"version":3,"sources":["../src/mod_form.js"],"names":["define","addServerButton","document","getElementById","missingConfig","getElementsByName","lmsSelectorUrl","systemLanguage","serverController","serverStructure","serverDropDown","init","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","removeChildElems","getAllServers","problemSelectorController","problemSelectorButton","problemSelectorWindow","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","sendFailure","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","isGraded","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","focus","displayProblemSelectedMessage","error","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","gradingType","getGradingType","onclick","open","encodeURIComponent","urlprefix","getSelectedLanguage","location","onclose","courseNameElem","coursefileElem","updateCoursefilePath","coursefile","updateCourseName","selectedCourse","getSelectedCourse","selectedLanguage","translation","courses","course","courseFile","languageElem","languageExists","lang","languages","includes","Error","taskSelectionInput","nameElem","taskDisplayElement","isGradedElem","updateName","newHeadline","getHeadline","getSelectedTask","isCustomName","length","getAllHeadlines","task","headlineWrapper","headline","localHeadline","getAllTasks","flatMap","tasks","map","concat","n","getLocalizedLinkFromTask","getLocalizedLink","updateGradeEditability","getPseudoTaskFromCourse","i","push","selectedLink","slice","newSelection","multiTaskEditController","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","pushIfNotExists","array","element","setTaskSelectionListeners","forEach","checkbox","onchange","checked","filter","elem","setPropertySelectionListeners","setSectionSelectionListeners","sectionCheckbox","taskCheckbox","getAttribute","disableDropDownMenus","errorKey","contextid","prbSelectorUrl","isEdit","serverConfigExists","MumieServer","firstChild","removeChild"],"mappings":"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","sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                },\n                getAllServers: function() {\n                    return serverStructure;\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything, if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link + '?lang=' + importObj.language);\n                        taskController.setIsGraded(isGraded);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            return {\n                init: function() {\n                    const gradingType = taskController.getGradingType();\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(\n                            lmsSelectorUrl\n                                + '/lms-problem-selector?'\n                                + 'org='\n                                + mumieOrg\n                                + '&serverUrl='\n                                + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                                + '&problemLang='\n                                + langController.getSelectedLanguage()\n                                + '&origin=' + encodeURIComponent(window.location.origin)\n                                + '&uiLang=' + systemLanguage\n                                + '&gradingType=' + gradingType\n                                + '&multiCourse=true'\n                            , '_blank'\n                        );\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCoursefilePath(coursefile) {\n                coursefileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === coursefileElem.value);\n                },\n                updateCourseName: function() {\n                    updateCourseName();\n                },\n                setCourse: function(courseFile) {\n                    updateCoursefilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n\n            /**\n             * Check if the given language exists in the currently selected course.\n             * @param {string} lang\n             * @returns {boolean} Whether the language exists\n             */\n            function languageExists(lang) {\n                return courseController.getSelectedCourse().languages.includes(lang);\n            }\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    if (!languageExists(lang)) {\n                        throw new Error(\"Selected language not available\");\n                    }\n                    languageElem.value = lang;\n                    courseController.updateCourseName();\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const isGradedElem = document.getElementById('id_mumie_isgraded');\n\n\n            /**\n             * Update the activity's name in the input field\n             */\n            function updateName() {\n                const newHeadline = getHeadline(taskController.getSelectedTask());\n                if (!isCustomName()) {\n                    nameElem.value = newHeadline;\n                }\n                taskDisplayElement.value = newHeadline;\n            }\n\n            /**\n             * Check whether the activity has a custom name\n             *\n             * @return {boolean} True, if there is no headline with that name in all tasks\n             */\n            function isCustomName() {\n                if (nameElem.value.length === 0) {\n                    return false;\n                }\n                return !getAllHeadlines().includes(nameElem.value);\n            }\n\n            /**\n             * Get the task's headline for the currently selected language\n             * @param {Object} task\n             * @returns  {string|null} the headline\n             */\n            function getHeadline(task) {\n                if (!task) {\n                    return null;\n                }\n                const selectedLanguage = langController.getSelectedLanguage();\n                const headlineWrapper = task.headline.find(localHeadline => localHeadline.language === selectedLanguage);\n                return headlineWrapper ? headlineWrapper.name : null;\n            }\n\n            /**\n             * Get all tasks that are available on all servers\n             *\n             * @return {Object} Array containing all available tasks\n             */\n            function getAllTasks() {\n                return serverController.getAllServers()\n                    .flatMap(server => server.courses)\n                    .flatMap(course => course.tasks);\n            }\n\n            /**\n             * Get all possible headlines in all languages\n             * @returns {Object} Array containing all headlines\n             */\n            function getAllHeadlines() {\n                return getAllTasks().flatMap(task => task.headline)\n                    .map(headline => headline.name)\n                    .concat(courseController.getSelectedCourse().name.map(n => n.value));\n            }\n\n            /**\n             * Add language parameter to the task's link to display content in the selected language\n             * @param {Object} task\n             * @returns {string}\n             */\n            function getLocalizedLinkFromTask(task) {\n                return getLocalizedLink(task.link);\n            }\n\n            /**\n             * Add language parameter to link\n             * @param {string} link\n             * @returns {string}\n             */\n            function getLocalizedLink(link) {\n                return link + \"?lang=\" + langController.getSelectedLanguage();\n            }\n\n            /**\n             * Form inputs related to grades should be disabled, if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = isGradedElem.value === '0';\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_duedate_enabled').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n            }\n\n            /**\n             * Get a task that links to a course's overview page\n             * @param {Object} course\n             * @returns {Object} task\n             */\n            function getPseudoTaskFromCourse(course) {\n                var headline = [];\n                for (var i in course.name) {\n                    var name = course.name[i];\n                    headline.push({\n                        \"name\": name.value,\n                        \"language\": name.language\n                    });\n                }\n                return {\n                    \"link\": course.link,\n                    \"headline\": headline\n                };\n            }\n\n            return {\n                init: function() {\n                    updateName();\n                },\n                getSelectedTask: function() {\n                    const selectedLink = taskSelectionInput.value;\n                    const selectedCourse = courseController.getSelectedCourse();\n                    if (!selectedCourse) {\n                        return null;\n                    }\n                    const tasks = selectedCourse\n                        .tasks\n                        .slice();\n                    tasks.push(getPseudoTaskFromCourse(selectedCourse));\n                    return tasks\n                        .find(task => getLocalizedLinkFromTask(task) === selectedLink);\n                },\n                setSelection: function(newSelection) {\n                    taskSelectionInput.value = newSelection;\n                    updateName();\n                },\n                setIsGraded: function(isGraded) {\n                    if (isGraded === null) {\n                        isGradedElem.value = null;\n                    }\n                    isGradedElem.value = isGraded ? '1' : '0';\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = isGradedElem.value;\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextid, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init(isEdit);\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextid);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });\n"],"file":"mod_form.min.js"}