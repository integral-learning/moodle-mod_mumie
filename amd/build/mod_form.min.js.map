{"version":3,"sources":["../src/mod_form.js"],"names":["define","addServerButton","document","getElementById","missingConfig","getElementsByName","lmsSelectorUrl","systemLanguage","serverController","serverStructure","serverDropDown","init","structure","onchange","courseController","updateOptions","langController","taskController","updateCompleteCourseVisibility","getSelectedServer","selectedServerName","options","selectedIndex","text","i","server","name","disable","disabled","removeChildElems","getAllServers","problemSelectorController","problemSelectorButton","problemSelectorWindow","mumieOrg","value","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","sendFailure","addMessageListener","window","addEventListener","event","origin","importObj","parse","data","setLanguage","language","setSelection","link","focus","displayProblemSelectedMessage","error","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","onclick","open","encodeURIComponent","urlprefix","getSelectedLanguage","location","onclose","courseDropDown","coursefileElem","addOptionForCourse","course","optionCourse","createElement","selectedLanguage","languages","includes","setAttribute","append","updateCoursefilePath","getSelectedCourse","coursefile","isEdit","selectedCourseName","courses","j","selectedCourseFile","childElementCount","languageDropDown","addLanguageOption","lang","optionLang","option","Error","currentLang","taskSelectionInput","nameElem","taskDisplayElement","useCompleteCourseElem","updateName","isCustomName","getHeadline","getSelectedTask","length","getAllHeadlines","task","headline","localHeadline","getAllTasks","tasks","m","push","headlines","getPseudoTaskFromCourse","n","getLocalizedLinkFromTask","getLocalizedLink","useCompleteCourse","checked","localizedLink","selectedLink","slice","newSelection","visible","parentElement","style","disableDropDownMenus","errorKey","getAttribute","contextid","prbSelectorUrl","serverConfigExists","MumieServer","elem","firstChild","removeChild"],"mappings":"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","sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        var addServerButton = document.getElementById(\"id_add_server_button\");\n        var missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        var lmsSelectorUrl;\n        var systemLanguage;\n        var serverController = (function() {\n            var serverStructure;\n            var serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                    serverDropDown.onchange = function() {\n                        courseController.updateOptions();\n                        langController.updateOptions();\n                        taskController.updateCompleteCourseVisibility();\n                    };\n                },\n                getSelectedServer: function() {\n                    var selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n\n                    for (var i in serverStructure) {\n                        var server = serverStructure[i];\n                        if (server.name == selectedServerName) {\n                            return server;\n                        }\n                    }\n                    return null;\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                },\n                getAllServers: function() {\n                    return serverStructure;\n                }\n            };\n        })();\n\n        var problemSelectorController = (function() {\n            var problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            var problemSelectorWindow;\n            var mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything, if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin != lmsSelectorUrl) {\n                        return;\n                    }\n                    var importObj = JSON.parse(event.data);\n                    try {\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link + '?lang=' + importObj.language);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                  }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            return {\n                init: function() {\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(\n                            lmsSelectorUrl\n                                + '/lms-problem-selector?'\n                                + 'org='\n                                + mumieOrg\n                                + '&serverUrl='\n                                + encodeURIComponent(serverController.getSelectedServer().urlprefix)\n                                + '&problemLang='\n                                + langController.getSelectedLanguage()\n                                + '&origin=' + encodeURIComponent(window.location.origin)\n                                + '&uiLang=' + systemLanguage\n                            , '_blank'\n                        );\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                     }, false);\n\n                    addMessageListener();\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        var courseController = (function() {\n            var courseDropDown = document.getElementById(\"id_mumie_course\");\n            var coursefileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n            /**\n             * Add a new option the the 'MUMIE Course' drop down menu\n             * @param {Object} course\n             */\n            function addOptionForCourse(course) {\n                var optionCourse = document.createElement(\"option\");\n                var selectedLanguage = langController.getSelectedLanguage();\n                var name;\n                // If the currently selected server is not available on the server, we need to select another one.\n                if (!course.languages.includes(selectedLanguage)) {\n                    name = course.name[0];\n                } else {\n                    for (var i in course.name) {\n                        if (course.name[i].language == selectedLanguage) {\n                            name = course.name[i];\n                        }\n                    }\n                }\n                optionCourse.setAttribute(\"value\", name.value);\n                optionCourse.text = name.value;\n                courseDropDown.append(optionCourse);\n            }\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             */\n            function updateCoursefilePath() {\n                coursefileElem.value = courseController.getSelectedCourse().coursefile;\n            }\n\n            return {\n                init: function(isEdit) {\n                    courseDropDown.onchange = function() {\n                        updateCoursefilePath();\n                        langController.updateOptions();\n                        taskController.updateCompleteCourseVisibility();\n                    };\n                    courseController.updateOptions(isEdit ? coursefileElem.value : false);\n                },\n                getSelectedCourse: function() {\n                    var selectedCourseName = courseDropDown.options[courseDropDown.selectedIndex].text;\n                    var courses = serverController.getSelectedServer().courses;\n                    for (var i in courses) {\n                        var course = courses[i];\n                        for (var j in course.name) {\n                            if (course.name[j].value == selectedCourseName) {\n                                return course;\n                            }\n                        }\n                    }\n                    return null;\n                },\n                disable: function() {\n                    courseDropDown.disabled = true;\n                    removeChildElems(courseDropDown);\n                },\n                updateOptions: function() {\n                    var selectedCourseFile = coursefileElem.value;\n                    removeChildElems(courseDropDown);\n                    courseDropDown.selectedIndex = 0;\n                    var courses = serverController.getSelectedServer().courses;\n                    for (var i in courses) {\n                        var course = courses[i];\n                        addOptionForCourse(course);\n                        if (course.coursefile == selectedCourseFile) {\n                            courseDropDown.selectedIndex = courseDropDown.childElementCount - 1;\n                        }\n                    }\n                    updateCoursefilePath();\n                }\n            };\n        })();\n\n        var langController = (function() {\n            var languageDropDown = document.getElementById(\"id_language\");\n\n            /**\n             * Add a new option to the language drop down menu\n             * @param {string} lang the language to add\n             */\n            function addLanguageOption(lang) {\n                var optionLang = document.createElement(\"option\");\n                optionLang.setAttribute(\"value\", lang);\n                optionLang.text = lang;\n                languageDropDown.append(optionLang);\n            }\n            return {\n                init: function() {\n\n                    languageDropDown.onchange = function() {\n                        courseController.updateOptions();\n                    };\n                    langController.updateOptions();\n                },\n                getSelectedLanguage: function() {\n                    return languageDropDown.options[languageDropDown.selectedIndex].text;\n                },\n                setLanguage: function(lang) {\n                    for (var i in languageDropDown.options) {\n                        var option = languageDropDown.options[i];\n                        if (option.value == lang) {\n                            languageDropDown.selectedIndex = i;\n                            courseController.updateOptions();\n                            return;\n                        }\n                    }\n                    throw new Error(\"Selected language not available\");\n                },\n                disable: function() {\n                    languageDropDown.disabled = true;\n                    removeChildElems(languageDropDown);\n                },\n                updateOptions: function() {\n                    var currentLang = langController.getSelectedLanguage();\n                    removeChildElems(languageDropDown);\n                    languageDropDown.selectedIndex = 0;\n                    var languages = courseController.getSelectedCourse().languages;\n                    for (var i in languages) {\n                        var lang = languages[i];\n                        addLanguageOption(lang);\n                        if (lang == currentLang) {\n                            languageDropDown.selectedIndex = languageDropDown.childElementCount - 1;\n                        }\n                    }\n                }\n            };\n        })();\n\n        var taskController = (function() {\n            var taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            var nameElem = document.getElementById(\"id_name\");\n            var taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            var useCompleteCourseElem = document.getElementById(\"id_mumie_complete_course\");\n\n            /**\n             * Update the activity's name in the input field\n             */\n            function updateName() {\n                if (!isCustomName()) {\n                    nameElem.value = getHeadline(taskController.getSelectedTask());\n                }\n                taskDisplayElement.value = getHeadline(taskController.getSelectedTask());\n            }\n\n            /**\n             * Check whether the activity has a custom name\n             *\n             * @return {boolean} True, if there is no headline with that name in all tasks\n             */\n            function isCustomName() {\n                if (nameElem.value.length == 0) {\n                    return false;\n                }\n                return !getAllHeadlines().includes(nameElem.value);\n            }\n\n            /**\n             * Get the task's headline for the currently selected language\n             * @param {Object} task\n             * @returns  {string} the headline\n             */\n            function getHeadline(task) {\n                if (!task) {\n                    return null;\n                }\n                for (var i in task.headline) {\n                    var localHeadline = task.headline[i];\n                    if (localHeadline.language == langController.getSelectedLanguage()) {\n                        return localHeadline.name;\n                    }\n                }\n                return null;\n            }\n\n            /**\n             * Get all tasks that are available on all servers\n             *\n             * @return {Object} Array containing all available tasks\n             */\n            function getAllTasks() {\n                var tasks = [];\n                for (var i in serverController.getAllServers()) {\n                    var server = serverController.getAllServers()[i];\n                    for (var j in server.courses) {\n                        var course = server.courses[j];\n                        for (var m in course.tasks) {\n                            var task = course.tasks[m];\n                            tasks.push(task);\n                        }\n                    }\n                }\n                return tasks;\n            }\n\n            /**\n             * Get all possible headlines in all languages\n             * @returns {Object} Array containing all headlines\n             */\n            function getAllHeadlines() {\n                var headlines = [];\n                var tasks = getAllTasks();\n                tasks.push(getPseudoTaskFromCourse(courseController.getSelectedCourse()));\n                for (var i in tasks) {\n                    var task = tasks[i];\n                    for (var n in task.headline) {\n                        headlines.push(task.headline[n].name);\n                    }\n                }\n                var course = courseController.getSelectedCourse();\n                for (var j in course.name) {\n                    var name = course.name[j];\n                    headlines.push(name.value);\n                }\n                return headlines;\n            }\n\n            /**\n             * Add language parameter to the task's link to display content in the selected language\n             * @param {Object} task\n             * @returns {string}\n             */\n            function getLocalizedLinkFromTask(task) {\n                return getLocalizedLink(task.link);\n            }\n\n            /**\n             * Add language parameter to link\n             * @param {string} link\n             * @returns {string}\n             */\n            function getLocalizedLink(link) {\n                return link + \"?lang=\" + langController.getSelectedLanguage();\n            }\n\n\n            /**\n             * Get a task that links to a course's overview page\n             * @param {Object} course\n             * @returns {Object} task\n             */\n            function getPseudoTaskFromCourse(course) {\n                var headline = [];\n                for (var i in course.name) {\n                    var name = course.name[i];\n                    headline.push({\n                        \"name\": name.value,\n                        \"language\": name.language\n                    });\n                }\n                return {\n                    \"link\": course.link,\n                    \"headline\": headline\n                };\n            }\n\n            /**\n             * Returns true, if the user has chosen to select the entire course instead of a single problem\n             * @returns {boolean}\n             */\n            function useCompleteCourse() {\n                return useCompleteCourseElem.checked;\n            }\n\n            return {\n                init: function() {\n                    taskController.updateCompleteCourseVisibility();\n                    updateName();\n                    useCompleteCourseElem.onchange = function() {\n                        if (useCompleteCourse()) {\n                            var localizedLink = getLocalizedLink(courseController.getSelectedCourse().link);\n                            taskController.setSelection(localizedLink);\n                        } else {\n                            taskController.setSelection(null);\n                        }\n                        // Circumvent moodle bug that ignores \"disabled\" if visibility has changed.\n                        taskDisplayElement.disabled = \"1\";\n                    };\n                },\n                getSelectedTask: function() {\n                    var selectedLink = taskSelectionInput.value;\n                    var course = courseController.getSelectedCourse();\n                    var tasks = course.tasks.slice();\n                    tasks.push(getPseudoTaskFromCourse(course));\n                    for (var i in tasks) {\n                        var task = tasks[i];\n                        if (selectedLink == getLocalizedLinkFromTask(task)) {\n                            return task;\n                        }\n                    }\n                    return null;\n                },\n                setSelection: function(newSelection) {\n                    taskSelectionInput.value = newSelection;\n                    updateName();\n                },\n                useCompleteCourse: function() {\n                    return useCompleteCourse();\n                },\n                updateCompleteCourseVisibility: function() {\n                    var visible = courseController.getSelectedCourse().link;\n                    useCompleteCourseElem.parentElement.parentElement.parentElement.style =\n                     visible ? \"display:block\" : \"display:none\";\n                }\n            };\n        })();\n\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key':  errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            courseController.disable();\n            langController.disable();\n            taskController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextid, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                var isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                var serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init(isEdit);\n                    taskController.init(isEdit);\n                    langController.init();\n                    problemSelectorController.init();\n                }\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextid);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });"],"file":"mod_form.min.js"}