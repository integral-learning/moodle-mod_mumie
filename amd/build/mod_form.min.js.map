{"version":3,"file":"mod_form.min.js","sources":["../src/mod_form.js"],"sourcesContent":["define(['jquery', 'core/templates', 'core/modal_factory', 'auth_mumie/mumie_server_config', 'core/ajax'],\n    function() {\n        const addServerButton = document.getElementById(\"id_add_server_button\");\n        const missingConfig = document.getElementsByName(\"mumie_missing_config\")[0];\n        let lmsSelectorUrl;\n        let systemLanguage;\n        let contextId;\n\n\n        const durationController = (function() {\n\n            const durationSelector = document.getElementById('id_duration_selector');\n            const gradedElem = document.getElementById('id_mumie_isgraded');\n\n            /**\n             * Returns if task is ungraded like courses and articles.\n             */\n            function isUngraded() {\n                return gradedElem.value === '0';\n            }\n\n            /**\n             * Updates the visibility of elements around duration selector.\n             */\n            function updateDurationElements() {\n                const disabled = isUngraded();\n                if (disabled) {\n                    durationSelector.setAttribute('disabled', 'disabled');\n                    durationSelector.value = 'unlimited';\n                } else {\n                    durationSelector.removeAttribute('disabled');\n                }\n\n                const displayNone = 'none';\n\n                if (durationSelector.value === 'unlimited') {\n                    document.getElementById('fitem_id_unlimited_info').hidden = false;\n                    document.getElementById('fitem_id_unlimited_info').style.display = '';\n\n                    document.getElementById('fitem_id_timelimit').style.display = displayNone;\n                    document.getElementById('fitem_id_timelimit_info').style.display = displayNone;\n                    document.getElementById('fitem_id_duedate').style.display = displayNone;\n                    document.getElementById('fitem_id_duedate_info').style.display = displayNone;\n                } else if (durationSelector.value === 'duedate') {\n                    document.getElementById('fitem_id_duedate').style.display = '';\n                    document.getElementById('fitem_id_duedate_info').style.display = '';\n\n                    document.getElementById('fitem_id_unlimited_info').style.display = displayNone;\n                    document.getElementById('fitem_id_timelimit').style.display = displayNone;\n                    document.getElementById('fitem_id_timelimit_info').style.display = displayNone;\n                } else if (durationSelector.value === 'timelimit') {\n                    document.getElementById('fitem_id_timelimit').style.display = '';\n                    document.getElementById('fitem_id_timelimit_info').style.display = '';\n\n                    document.getElementById('fitem_id_duedate').style.display = displayNone;\n                    document.getElementById('fitem_id_duedate_info').style.display = displayNone;\n                    document.getElementById('fitem_id_unlimited_info').style.display = displayNone;\n                }\n            }\n\n            return {\n                init: function() {\n                    durationSelector.onchange = function() {\n                        updateDurationElements();\n                    };\n                    window.addEventListener(\"load\", () => {\n                        updateDurationElements();\n                    });\n                },\n                setDurationElements: updateDurationElements,\n                isUngraded: isUngraded,\n                setGradedElemValue: function(isGraded) {\n                    gradedElem.value = isGraded ? '1' : '0';\n                },\n                getGradedElemValue: function() {\n                    return gradedElem.value;\n                }\n            };\n        });\n\n        const serverController = (function() {\n            let serverStructure;\n            const serverDropDown = document.getElementById(\"id_server\");\n\n            return {\n                init: function(structure) {\n                    serverStructure = structure;\n                },\n                getSelectedServer: function() {\n                    const selectedServerName = serverDropDown.options[serverDropDown.selectedIndex].text;\n                    return serverStructure.find(server => server.name === selectedServerName);\n                },\n                disable: function() {\n                    serverDropDown.disabled = true;\n                    removeChildElems(serverDropDown);\n                }\n            };\n        })();\n\n        const problemSelectorController = (function() {\n            const problemSelectorButton = document.getElementById('id_prb_selector_btn');\n            const multiProblemSelectorButton = document.getElementById('id_multi_problem_selector_btn');\n            let problemSelectorWindow;\n            const mumieOrg = document.getElementsByName('mumie_org')[0].value;\n\n            /**\n             * Send a message to the problem selector window.\n             *\n             * Don't do anything if there is no problem selector window.\n             * @param {Object} response\n             */\n            function sendResponse(response) {\n                if (!problemSelectorWindow) {\n                    return;\n                }\n                problemSelectorWindow.postMessage(JSON.stringify(response), lmsSelectorUrl);\n            }\n\n            /**\n             * Send a success message to a problem selector window\n             * @param {string} message\n             */\n            function sendSuccess(message = '') {\n                sendResponse({\n                    success: true,\n                    message: message\n                });\n            }\n\n            /**\n             * Send a failure message to a problem selector window\n             * @param {string} message\n             */\n            function sendFailure(message = '') {\n                sendResponse({\n                    success: false,\n                    message: message\n                });\n            }\n\n            /**\n             * Add an event listener that accepts messages from LMS-Browser and updates the selected problem.\n             */\n            function addMessageListener() {\n                window.addEventListener('message', (event) => {\n                    if (event.origin !== lmsSelectorUrl) {\n                        return;\n                    }\n                    const importObj = JSON.parse(event.data);\n                    const isGraded = importObj.isGraded !== false;\n                    const worksheet = importObj.worksheet ?? null;\n                    try {\n                        courseController.setCourse(importObj.path_to_coursefile);\n                        langController.setLanguage(importObj.language);\n                        taskController.setSelection(importObj.link, importObj.language, importObj.name);\n                        taskController.setIsGraded(isGraded);\n                        worksheetController.setWorksheet(worksheet);\n                        sendSuccess();\n                        window.focus();\n                        displayProblemSelectedMessage();\n                    } catch (error) {\n                        sendFailure(error.message);\n                    }\n                }, false);\n            }\n\n            /**\n             * Display a success message in Moodle that a problem was successfully selected.\n             */\n            function displayProblemSelectedMessage() {\n                require(['core/str', \"core/notification\"], function(str, notification) {\n                    str.get_strings([{\n                        'key': 'mumie_form_updated_selection',\n                        component: 'mod_mumie'\n                    }]).done(function(s) {\n                        notification.addNotification({\n                            message: s[0],\n                            type: \"info\"\n                        });\n                    }).fail(notification.exception);\n                });\n            }\n\n            /**\n             * Builds the URL to the Problem Selector\n             * @returns {string} URL to the Problem Selector\n             */\n            function buildURL() {\n                const gradingType = taskController.getGradingType();\n                const selection = taskController.getDelocalizedTaskLink();\n                const selectedServer = serverController.getSelectedServer().urlprefix;\n                const useSSO = shouldUseSSO(lmsSelectorUrl, selectedServer);\n                if (useSSO) {\n                    return '/auth/mumie/problem_selector.php?' +\n                        'org=' +\n                        mumieOrg +\n                        '&serverurl=' +\n                        encodeURIComponent(selectedServer) +\n                        '&problemlang=' +\n                        langController.getSelectedLanguage() +\n                        '&origin=' + encodeURIComponent(window.location.origin) +\n                        '&gradingtype=' + gradingType +\n                        '&contextid=' + contextId +\n                        (selection ? '&selection=' + selection : '');\n                }\n                return lmsSelectorUrl +\n                    '/lms-problem-selector?' +\n                    'org=' +\n                    mumieOrg +\n                    '&serverUrl=' +\n                    encodeURIComponent(selectedServer) +\n                    '&problemLang=' +\n                    langController.getSelectedLanguage() +\n                    '&origin=' + encodeURIComponent(window.location.origin) +\n                    '&uiLang=' + systemLanguage +\n                    '&gradingType=' + gradingType +\n                    '&multiCourse=true' +\n                    '&worksheet=true' +\n                    (selection ? '&selection=' + selection : '');\n            }\n\n            /**\n             * Determines whether the Single Sign-On (SSO) should be used when opening the Problem Selector.\n             * SSO is only supposed to be used when the Problem Selector URL has the same origin as the\n             * URL of the selected MUMIE server.\n             *\n             * @param {string} problemSelectorUrl - The URL of the problem selector.\n             * @param {string} selectedServerUrl - The URL of the selected MUMIE server\n             * @returns {boolean} Whether SSO should be used for the Problem Selector or not\n             */\n            function shouldUseSSO(problemSelectorUrl, selectedServerUrl) {\n                return new URL(problemSelectorUrl).origin === new URL(selectedServerUrl).origin;\n            }\n\n            return {\n                init: function() {\n                    problemSelectorButton.onclick = function() {\n                        problemSelectorWindow = window.open(buildURL(), '_blank');\n                    };\n\n                    window.onclose = function() {\n                        sendSuccess();\n                    };\n\n                    window.addEventListener(\"beforeunload\", function() {\n                        sendSuccess();\n                    }, false);\n\n                    addMessageListener();\n\n                    multiProblemSelectorButton.onclick = function(e) {\n                        e.preventDefault();\n                        problemSelectorWindow = window.open(\n                            lmsSelectorUrl +\n                            '/lms-problem-selector?' +\n                            \"serverUrl=\" +\n                            encodeURIComponent(serverController.getSelectedServer().urlprefix) +\n                            '&gradingType=all',\n                            \"_blank\",\n                            'toolbar=0,location=0,menubar=0'\n                        );\n                    };\n                },\n                disable: function() {\n                    problemSelectorButton.disabled = true;\n                }\n            };\n        })();\n\n        const courseController = (function() {\n            const courseNameElem = document.getElementById(\"id_mumie_course\");\n            const courseFileElem = document.getElementsByName(\"mumie_coursefile\")[0];\n\n\n            /**\n             * Update the hidden input field with the selected course's course file path\n             *\n             * @param {string} coursefile\n             */\n            function updateCourseFilePath(coursefile) {\n                courseFileElem.value = coursefile;\n                updateCourseName();\n            }\n\n            /**\n             * Update displayed course name.\n             */\n            function updateCourseName() {\n                const selectedCourse = courseController.getSelectedCourse();\n                const selectedLanguage = langController.getSelectedLanguage();\n                if (!selectedCourse || !selectedLanguage) {\n                    return;\n                }\n                courseNameElem.value = selectedCourse.name\n                    .find(translation => translation.language === selectedLanguage)?.value;\n            }\n\n            return {\n                init: function() {\n                    updateCourseName();\n                },\n                getSelectedCourse: function() {\n                    const courses = serverController.getSelectedServer().courses;\n                    return courses.find(course => course.coursefile === courseFileElem.value);\n                },\n                setCourse: function(courseFile) {\n                    updateCourseFilePath(courseFile);\n                }\n            };\n        })();\n\n        const langController = (function() {\n            const languageElem = document.getElementById(\"id_language\");\n            return {\n                getSelectedLanguage: function() {\n                    return languageElem.value;\n                },\n                setLanguage: function(lang) {\n                    languageElem.value = lang;\n                }\n            };\n        })();\n\n        const taskController = (function() {\n            const taskSelectionInput = document.getElementsByName(\"taskurl\")[0];\n            const nameElem = document.getElementById(\"id_name\");\n            const taskDisplayElement = document.getElementById(\"id_task_display_element\");\n            const LANG_REQUEST_PARAM_PREFIX = \"?lang=\";\n\n            /**\n             * Update the activity's name in the input field\n             * @param {string} name\n             */\n            function updateName(name) {\n                nameElem.value = name;\n            }\n\n            /**\n             * @param {string} localizedLink\n             */\n            function updateTaskDisplayElement(localizedLink) {\n                taskDisplayElement.value = localizedLink;\n            }\n\n            /**\n             * Update task uri\n             * @param {string} link\n             * @param {string} language\n             */\n            function updateTaskUri(link, language) {\n                const localizedLink = localizeLink(link, language);\n                taskSelectionInput.value = localizedLink;\n                updateTaskDisplayElement(localizedLink);\n            }\n\n            /**\n             * Add lang request param to link\n             * @param {string} link\n             * @param {string} language\n             * @returns {string} Link with lang request param\n             */\n            function localizeLink(link, language) {\n                return link + LANG_REQUEST_PARAM_PREFIX + language;\n            }\n\n            /**\n             * Remove lang request param from link\n             * @param {string} link Link that may have lang request param\n             * @returns {string} Link without lang request param\n             */\n            function delocalizeLink(link) {\n                if (link.includes(LANG_REQUEST_PARAM_PREFIX)) {\n                    return link.split(LANG_REQUEST_PARAM_PREFIX)[0];\n                }\n                return link;\n            }\n\n            /**\n             * Form inputs related to grades should be disabled if the MUMIE Task is not graded.\n             */\n            function updateGradeEditability() {\n                const disabled = durationController().isUngraded();\n                document.getElementById('id_points').disabled = disabled;\n                document.getElementById('id_gradepass').disabled = disabled;\n                document.getElementById('id_gradecat').disabled = disabled;\n                durationController().setDurationElements();\n            }\n\n            return {\n                init: function() {\n                    updateTaskDisplayElement(taskSelectionInput.value);\n                },\n                setSelection: function(link, language, name) {\n                    updateTaskUri(link, language);\n                    updateName(name);\n                },\n                setIsGraded: function(isGraded) {\n                    durationController().setGradedElemValue(isGraded);\n                    updateGradeEditability();\n                },\n                getGradingType: function() {\n                    const isGraded = durationController().getGradedElemValue();\n                    if (isGraded === '1') {\n                        return 'graded';\n                    } else if (isGraded === '0') {\n                        return 'ungraded';\n                    }\n                    return 'all';\n                },\n                getDelocalizedTaskLink: function() {\n                    return delocalizeLink(taskSelectionInput.value);\n                }\n            };\n        })();\n\n\n        const multiTaskEditController = (function() {\n            const propertySelectionInputs = document.getElementsByName(\"mumie_multi_edit_property\");\n            const selectedTaskProperties = document.getElementsByName(\"mumie_selected_task_properties\")[0];\n            let selectedTaskProp = [];\n            const taskSelectionInputs = document.getElementsByName(\"mumie_multi_edit_task\");\n            const selectedTasks = document.getElementsByName(\"mumie_selected_tasks\")[0];\n            let selectedTaskIds = [];\n            const sectionInputs = document.getElementsByName(\"mumie_multi_edit_section\");\n\n            /**\n             * Push an element to an array, if it's not already included.\n             *\n             * @param {string[]} array\n             * @param {string} element\n             */\n            function pushIfNotExists(array, element) {\n                if (!array.includes(element)) {\n                    array.push(element);\n                }\n            }\n\n            /**\n             * Set selection listeners for other MUMIE Tasks in the course.\n             */\n            function setTaskSelectionListeners() {\n                taskSelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskIds = selectedTaskIds.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskIds.push(checkbox.value);\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for properties to apply to MUMIE Tasks in the course.\n             */\n            function setPropertySelectionListeners() {\n                propertySelectionInputs.forEach(function(checkbox) {\n                    checkbox.onchange = function() {\n                        if (!checkbox.checked) {\n                            selectedTaskProp = selectedTaskProp.filter(elem => elem !== checkbox.value);\n                        } else {\n                            selectedTaskProp.push(checkbox.value);\n                        }\n                        selectedTaskProperties.value = JSON.stringify(selectedTaskProp);\n                    };\n                });\n            }\n\n            /**\n             * Set selection listeners for entire section of MUMIE Tasks in the course\n             */\n            function setSectionSelectionListeners() {\n                sectionInputs.forEach(function(sectionCheckbox) {\n                    sectionCheckbox.onchange = function() {\n                        if (!sectionCheckbox.checked) {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = false;\n                                    selectedTaskIds = selectedTaskIds.filter(elem => taskCheckbox.value !== elem);\n                                }\n                            });\n                        } else {\n                            taskSelectionInputs.forEach(function(taskCheckbox) {\n                                if (taskCheckbox.getAttribute('section') === sectionCheckbox.value) {\n                                    taskCheckbox.checked = true;\n                                    pushIfNotExists(selectedTaskIds, taskCheckbox.value);\n                                }\n                            });\n                        }\n                        selectedTasks.value = JSON.stringify(selectedTaskIds);\n                    };\n                });\n            }\n\n            return {\n                init: function() {\n                    setTaskSelectionListeners();\n                    setPropertySelectionListeners();\n                    setSectionSelectionListeners();\n                },\n            };\n        })();\n\n        const worksheetController = (function() {\n            const worksheetElement = document.getElementById(\"id_mumie_worksheet\");\n            return {\n                setWorksheet: function(worksheet) {\n                    if (worksheet) {\n                        worksheetElement.setAttribute(\"value\", JSON.stringify(worksheet));\n                    } else {\n                        worksheetElement.removeAttribute(\"value\");\n                    }\n                }\n            };\n        })();\n\n        /**\n         *  Disable all dropdown menus and show notification\n         * @param {string} errorKey\n         */\n        function disableDropDownMenus(errorKey) {\n            require(['core/str', \"core/notification\"], function(str, notification) {\n                str.get_strings([{\n                    'key': errorKey,\n                    component: 'mod_mumie'\n                }]).done(function(s) {\n                    notification.addNotification({\n                        message: s[0] + \"<b>\" + missingConfig.getAttribute(\"value\") + \"</b>\",\n                        type: \"problem\"\n                    });\n                }).fail(notification.exception);\n            });\n            serverController.disable();\n            problemSelectorController.disable();\n        }\n\n        return {\n            init: function(contextIdParam, prbSelectorUrl, lang) {\n                lmsSelectorUrl = prbSelectorUrl;\n                systemLanguage = lang;\n                contextId = contextIdParam;\n                const isEdit = document.getElementById(\"id_name\").getAttribute('value');\n                const serverStructure = JSON.parse(document.getElementsByName('mumie_server_structure')[0].value);\n                if (isEdit && !serverConfigExists()) {\n                    disableDropDownMenus('mumie_form_missing_server');\n                } else if (!serverStructure.length) {\n                    disableDropDownMenus('mumie_form_no_server_conf');\n                } else {\n                    serverController.init(serverStructure);\n                    courseController.init();\n                    taskController.init();\n                    multiTaskEditController.init();\n                    problemSelectorController.init();\n                    durationController().init();\n                }\n                multiTaskEditController.init();\n                if (addServerButton) {\n                    require(['auth_mumie/mumie_server_config'], function(MumieServer) {\n                        MumieServer.init(addServerButton, contextId);\n                    });\n                }\n            }\n        };\n\n        /**\n         * Remove all child elements of a given html element\n         * @param {Object} elem\n         */\n        function removeChildElems(elem) {\n            while (elem.firstChild) {\n                elem.removeChild(elem.firstChild);\n            }\n        }\n\n        /**\n         * Check, if the flag for an existing config is set\n         * @returns {boolean}\n         */\n        function serverConfigExists() {\n            return document.getElementsByName(\"mumie_missing_config\")[0].getAttribute(\"value\") === \"\";\n        }\n    });"],"names":["define","addServerButton","document","getElementById","missingConfig","getElementsByName","lmsSelectorUrl","systemLanguage","contextId","durationController","durationSelector","gradedElem","isUngraded","value","updateDurationElements","setAttribute","removeAttribute","hidden","style","display","init","onchange","window","addEventListener","setDurationElements","setGradedElemValue","isGraded","getGradedElemValue","serverController","serverStructure","serverDropDown","structure","getSelectedServer","selectedServerName","options","selectedIndex","text","find","server","name","disable","disabled","elem","firstChild","removeChild","removeChildElems","problemSelectorController","problemSelectorButton","multiProblemSelectorButton","problemSelectorWindow","mumieOrg","sendResponse","response","postMessage","JSON","stringify","sendSuccess","message","success","addMessageListener","event","origin","importObj","parse","data","worksheet","courseController","setCourse","path_to_coursefile","langController","setLanguage","language","taskController","setSelection","link","setIsGraded","worksheetController","setWorksheet","focus","require","str","notification","get_strings","component","done","s","addNotification","type","fail","exception","error","sendFailure","buildURL","gradingType","getGradingType","selection","getDelocalizedTaskLink","selectedServer","urlprefix","selectedServerUrl","URL","encodeURIComponent","getSelectedLanguage","location","onclick","open","onclose","e","preventDefault","courseNameElem","courseFileElem","updateCourseName","selectedCourse","getSelectedCourse","selectedLanguage","translation","_selectedCourse$name$","courses","course","coursefile","courseFile","languageElem","lang","taskSelectionInput","nameElem","taskDisplayElement","updateTaskDisplayElement","localizedLink","updateTaskUri","localizeLink","updateName","updateGradeEditability","includes","split","multiTaskEditController","propertySelectionInputs","selectedTaskProperties","selectedTaskProp","taskSelectionInputs","selectedTasks","selectedTaskIds","sectionInputs","forEach","checkbox","checked","push","filter","sectionCheckbox","taskCheckbox","array","element","getAttribute","worksheetElement","disableDropDownMenus","errorKey","contextIdParam","prbSelectorUrl","isEdit","length","MumieServer"],"mappings":"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"}