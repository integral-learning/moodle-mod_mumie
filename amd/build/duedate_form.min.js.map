{"version":3,"sources":["../src/duedate_form.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","MumieDueDate","selector","contextid","formdata","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","setLarge","getRoot","on","hidden","setBody","save","submitForm","submitFormAjax","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","call","methodname","args","done","fail","submit"],"mappings":"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","sourcesContent":["define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        var MumieDueDate = function(selector, contextid, formdata) {\n            this.contextid = contextid;\n            this.init(selector, formdata);\n        };\n\n        MumieDueDate.prototype.modal = null;\n\n        MumieDueDate.prototype.contextid = -1;\n\n        MumieDueDate.prototype.init = function(selector, formdata) {\n            var triggers = $(selector);\n            return Str.get_string('mumie_duedate_form', 'mod_mumie').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody(formdata)\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody(formdata));\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @param {Object} formdata\n         * @return {Promise}\n         */\n        MumieDueDate.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {\n                jsonformdata: JSON.stringify(formdata)\n            };\n            return Fragment.loadFragment('mod_mumie', 'new_duedate_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         */\n        MumieDueDate.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            document.location.reload();\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @param {Object} data\n         */\n        MumieDueDate.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        MumieDueDate.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            // Convert all the form elements values to a serialized string.\n            var formData = this.modal.getRoot().find('form').serialize();\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_mumie_submit_mumieduedate_form',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData)\n                },\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        MumieDueDate.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_mumie/newduedate */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialize this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {Object} formdata\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formdata) {\n                return new MumieDueDate(selector, contextid, formdata);\n            }\n        };\n\n    });"],"file":"duedate_form.min.js"}