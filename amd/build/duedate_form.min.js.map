{"version":3,"file":"duedate_form.min.js","sources":["../src/duedate_form.js"],"sourcesContent":["define(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\n    function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\n\n        var MumieDueDate = function(selector, contextid, formdata) {\n            this.contextid = contextid;\n            this.init(selector, formdata);\n        };\n\n        MumieDueDate.prototype.modal = null;\n\n        MumieDueDate.prototype.contextid = -1;\n\n        MumieDueDate.prototype.init = function(selector, formdata) {\n            var triggers = $(selector);\n            return Str.get_string('mumie_duedate_form', 'mod_mumie').then(function(title) {\n                // Create the modal.\n                return ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: this.getBody(formdata)\n                }, triggers);\n            }.bind(this)).then(function(modal) {\n                // Keep a reference to the modal.\n                this.modal = modal;\n\n                // Forms are big, we want a big modal.\n                this.modal.setLarge();\n\n                // We want to reset the form every time it is opened.\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\n                    this.modal.setBody(this.getBody(formdata));\n                }.bind(this));\n\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                this.modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n                // We also catch the form submit event and use it to submit the form with ajax.\n                this.modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n\n                return this.modal;\n\n            }.bind(this));\n        };\n\n        /**\n         * @method getBody\n         * @private\n         * @param {Object} formdata\n         * @return {Promise}\n         */\n        MumieDueDate.prototype.getBody = function(formdata) {\n            if (typeof formdata === \"undefined\") {\n                formdata = {};\n            }\n            // Get the content of the modal.\n            var params = {\n                jsonformdata: JSON.stringify(formdata)\n            };\n            return Fragment.loadFragment('mod_mumie', 'new_duedate_form', this.contextid, params);\n        };\n\n        /**\n         * @method handleFormSubmissionResponse\n         * @private\n         */\n        MumieDueDate.prototype.handleFormSubmissionResponse = function() {\n            this.modal.hide();\n            // We could trigger an event instead.\n            // Yuk.\n            Y.use('moodle-core-formchangechecker', function() {\n                M.core_formchangechecker.reset_form_dirty_state();\n            });\n\n            document.location.reload();\n        };\n\n        /**\n         * @method handleFormSubmissionFailure\n         * @private\n         * @param {Object} data\n         */\n        MumieDueDate.prototype.handleFormSubmissionFailure = function(data) {\n            // Oh noes! Epic fail :(\n            // Ah wait - this is normal. We need to re-display the form with errors!\n            this.modal.setBody(this.getBody(data));\n        };\n\n        /**\n         * Private method\n         *\n         * @method submitFormAjax\n         * @private\n         * @param {Event} e Form submission event.\n         */\n        MumieDueDate.prototype.submitFormAjax = function(e) {\n            // We don't want to do a real form submission.\n            e.preventDefault();\n\n            // Convert all the form elements values to a serialized string.\n            var formData = this.modal.getRoot().find('form').serialize();\n            // Now we can continue...\n            Ajax.call([{\n                methodname: 'mod_mumie_submit_mumieduedate_form',\n                args: {\n                    contextid: this.contextid,\n                    jsonformdata: JSON.stringify(formData)\n                },\n                done: this.handleFormSubmissionResponse.bind(this, formData),\n                fail: this.handleFormSubmissionFailure.bind(this, formData)\n            }]);\n        };\n\n        /**\n         * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n         *\n         * @method submitForm\n         * @param {Event} e Form submission event.\n         * @private\n         */\n        MumieDueDate.prototype.submitForm = function(e) {\n            e.preventDefault();\n            this.modal.getRoot().find('form').submit();\n        };\n\n        return /** @alias module:mod_mumie/newduedate */ {\n            // Public variables and functions.\n            /**\n             * Attach event listeners to initialize this module.\n             *\n             * @method init\n             * @param {string} selector The CSS selector used to find nodes that will trigger this module.\n             * @param {int} contextid The contextid for the course.\n             * @param {Object} formdata\n             * @return {Promise}\n             */\n            init: function(selector, contextid, formdata) {\n                return new MumieDueDate(selector, contextid, formdata);\n            }\n        };\n\n    });"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","MumieDueDate","selector","contextid","formdata","init","prototype","modal","triggers","get_string","then","title","create","type","types","SAVE_CANCEL","body","this","getBody","bind","setLarge","getRoot","on","hidden","setBody","save","submitForm","submitFormAjax","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","call","methodname","args","done","fail","submit"],"mappings":"AAAAA,gCAAO,CAAC,SAAU,WAAY,qBAAsB,oBAAqB,gBAAiB,YAAa,aACnG,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,KAAMC,OAEpDC,aAAe,SAASC,SAAUC,UAAWC,eACxCD,UAAYA,eACZE,KAAKH,SAAUE,kBAGxBH,aAAaK,UAAUC,MAAQ,KAE/BN,aAAaK,UAAUH,WAAa,EAEpCF,aAAaK,UAAUD,KAAO,SAASH,SAAUE,cACzCI,SAAWd,EAAEQ,iBACVP,IAAIc,WAAW,qBAAsB,aAAaC,KAAK,SAASC,cAE5Df,aAAagB,OAAO,CACvBC,KAAMjB,aAAakB,MAAMC,YACzBJ,MAAOA,MACPK,KAAMC,KAAKC,QAAQd,WACpBI,WACLW,KAAKF,OAAOP,KAAK,SAASH,mBAEnBA,MAAQA,WAGRA,MAAMa,gBAGNb,MAAMc,UAAUC,GAAGzB,YAAY0B,OAAQ,gBACnChB,MAAMiB,QAAQP,KAAKC,QAAQd,YAClCe,KAAKF,YAIFV,MAAMc,UAAUC,GAAGzB,YAAY4B,KAAMR,KAAKS,WAAWP,KAAKF,YAE1DV,MAAMc,UAAUC,GAAG,SAAU,OAAQL,KAAKU,eAAeR,KAAKF,OAE5DA,KAAKV,OAEdY,KAAKF,QASXhB,aAAaK,UAAUY,QAAU,SAASd,eACd,IAAbA,WACPA,SAAW,QAGXwB,OAAS,CACTC,aAAcC,KAAKC,UAAU3B,kBAE1BN,SAASkC,aAAa,YAAa,mBAAoBf,KAAKd,UAAWyB,SAOlF3B,aAAaK,UAAU2B,6BAA+B,gBAC7C1B,MAAM2B,OAGXlC,EAAEmC,IAAI,iCAAiC,WACnCC,EAAEC,uBAAuBC,4BAG7BC,SAASC,SAASC,UAQtBxC,aAAaK,UAAUoC,4BAA8B,SAASC,WAGrDpC,MAAMiB,QAAQP,KAAKC,QAAQyB,QAUpC1C,aAAaK,UAAUqB,eAAiB,SAASiB,GAE7CA,EAAEC,qBAGEC,SAAW7B,KAAKV,MAAMc,UAAU0B,KAAK,QAAQC,YAEjDjD,KAAKkD,KAAK,CAAC,CACPC,WAAY,qCACZC,KAAM,CACFhD,UAAWc,KAAKd,UAChB0B,aAAcC,KAAKC,UAAUe,WAEjCM,KAAMnC,KAAKgB,6BAA6Bd,KAAKF,KAAM6B,UACnDO,KAAMpC,KAAKyB,4BAA4BvB,KAAKF,KAAM6B,cAW1D7C,aAAaK,UAAUoB,WAAa,SAASkB,GACzCA,EAAEC,sBACGtC,MAAMc,UAAU0B,KAAK,QAAQO,UAGW,CAW7CjD,KAAM,SAASH,SAAUC,UAAWC,iBACzB,IAAIH,aAAaC,SAAUC,UAAWC"}